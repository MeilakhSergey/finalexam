apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: my-app
  name: my-app
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: my-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: my-app
    spec:
      #      serviceAccountName: ksa-name
      containers:
      - name: docker-image
        image: europe-west4-docker.pkg.dev/aerial-vehicle-328606/docker-repo/docker-image:tag1
        imagePullPolicy: IfNotPresent
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: username
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: password
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: database
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloudsql-docker/gce-proxy:1.26.0
        command: ["/cloud_sql_proxy",
                  "-ip_address_types=PRIVATE",
                  "-instances=aerial-vehicle-328606:europe-west4:my-sql=tcp:3306",
                  "-credential_file=/secrets/service_account.json"]
          #- "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
          #- "-instances=aerial-vehicle-328606:europe-west4:my-sql=tcp:3306"
          # This flag specifies where the service account key can be found
          #- "-credential_file=/secrets/service_account.json"
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: sa-secret-volume
          mountPath: /secrets/
          readOnly: true
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
      #      dnsPolicy: ClusterFirst
      #      restartPolicy: Always
      #      schedulerName: default-scheduler
      #      securityContext: {}
      #      terminationGracePeriodSeconds: 30
      volumes:
        - name: sa-secret-volume
          secret:
            secretName: service-account-secret